Exercise 00: Polymorphism (다형성)
이 문제는 C++의 기본적인 다형성(polymorphism) 개념을 이해하고 구현하는 연습입니다.
핵심 요구사항:

Animal이라는 기본 클래스를 만들고, 여기에 std::string type이라는 protected 멤버 변수를 포함합니다.
Dog와 Cat 클래스를 Animal로부터 상속받아 구현합니다.
각 파생 클래스는 자신의 종류에 맞게 type 필드를 설정해야 합니다. (Dog는 "Dog", Cat은 "Cat")
모든 Animal은 makeSound() 멤버 함수를 가지며, 각 동물에 맞는 소리를 출력해야 합니다.
다형성을 이해하기 위해 WrongAnimal과 WrongCat 클래스도 구현합니다.

핵심 개념:

가상 함수(virtual function)의 사용
런타임 다형성(runtime polymorphism)
업캐스팅(upcasting)

이 문제의 목표는 다형성을 통해 기본 클래스 포인터나 참조를 사용하더라도 실제 객체의 타입에 맞는 함수가 호출되도록 하는 것입니다.
Exercise 01: I don't want to set the world on fire
이 문제는 메모리 관리와 깊은 복사(deep copy)에 초점을 맞춘 연습입니다.
핵심 요구사항:

Brain 클래스를 구현합니다. 이 클래스는 100개의 std::string을 담는 ideas 배열을 가집니다.
Dog와 Cat 클래스에 Brain* 타입의 private 멤버 변수를 추가합니다.
객체 생성 시 new Brain()으로 Brain을 동적 할당하고, 소멸 시 delete로 해제합니다.
동물 객체 배열을 만들고, 프로그램이 끝날 때 모든 객체를 해제합니다.
깊은 복사를 구현하여 얕은 복사(shallow copy)의 문제를 방지합니다.

핵심 개념:

동적 메모리 할당 및 해제
깊은 복사 vs 얕은 복사
메모리 누수(memory leak) 방지
소멸자의 적절한 구현

이 문제는 C++에서 자원 관리의 중요성과 적절한 복사 생성자/대입 연산자 구현의 필요성을 강조합니다.
Exercise 02: Abstract class
이 문제는 추상 클래스(abstract class)의 개념을 이해하고 구현하는 연습입니다.
핵심 요구사항:

Animal 클래스를 추상 클래스로 변경하여 인스턴스화할 수 없도록 합니다.
이전 연습문제의 기능은 모두 유지되어야 합니다.
원하는 경우 Animal 대신 AAnimal과 같이 클래스 이름을 변경할 수 있습니다.

핵심 개념:

추상 클래스
순수 가상 함수(pure virtual function)
인스턴스화 방지

이 문제를 통해 추상 클래스를 사용하여 인터페이스를 정의하면서 직접 인스턴스화는 방지하는 방법을 배울 수 있습니다.
Exercise 03: Interface & recap
이 문제는 인터페이스 개념을 구현하고 이전에 배운 개념들을 종합하는 연습입니다.
핵심 요구사항:

AMateria, Ice, Cure 클래스 구현
ICharacter 인터페이스와 Character 구현 클래스
IMateriaSource 인터페이스와 MateriaSource 구현 클래스
복잡한 객체 관계와 메모리 관리

핵심 개념:

인터페이스 구현(순수 가상 함수 사용)
다형성
팩토리 패턴
메모리 관리
깊은 복사

이 문제는 이전 연습문제들의 개념을 모두 활용하여 더 복잡한 시스템을 설계하고 구현하는 능력을 테스트합니다.
각 연습문제는 C++의 객체 지향 프로그래밍 개념을 단계적으로 심화시키면서 배우도록 설계되어 있습니다. 첫 번째 문제는 기본적인 상속과 다형성을, 두 번째는 메모리 관리를, 세 번째는 추상 클래스를, 그리고 마지막은 이 모든 개념을 종합적으로 적용하는 법을 다룹니다.
